import {
  filterMacro,
  hasPropsOrEmits
} from "./chunk-ABUCOAYI.mjs";

// src/core/transform.ts
import {
  DEFINE_OPTIONS,
  MagicString,
  addNormalScript,
  checkInvalidScopeReference,
  getTransformResult,
  parseSFC
} from "@vue-macros/common";
import { walkAST } from "ast-walker-scope";
var transform = (code, id) => {
  if (!code.includes(DEFINE_OPTIONS))
    return;
  const sfc = parseSFC(code, id);
  if (!sfc.scriptSetup)
    return;
  const { script, scriptSetup, scriptCompiled } = sfc;
  const setupOffset = scriptSetup.loc.start.offset;
  const nodes = filterMacro(scriptCompiled.scriptSetupAst);
  if (nodes.length === 0) {
    return;
  } else if (nodes.length > 1)
    throw new SyntaxError(`duplicate ${DEFINE_OPTIONS}() call`);
  if (script)
    checkDefaultExport(scriptCompiled.scriptAst);
  const setupBindings = scriptCompiled.scriptSetupAst ? getIdentifiers(scriptCompiled.scriptSetupAst) : [];
  const s = new MagicString(code);
  const [node] = nodes;
  const [arg] = node.arguments;
  if (arg) {
    const normalScript = addNormalScript(sfc, s);
    const scriptOffset = normalScript.start();
    s.appendLeft(
      scriptOffset,
      `
import { defineComponent as DO_defineComponent } from 'vue';
export default /*#__PURE__*/ DO_defineComponent(`
    );
    if (arg.type === "ObjectExpression" && hasPropsOrEmits(arg))
      throw new SyntaxError(
        `${DEFINE_OPTIONS}() please use defineProps or defineEmits instead.`
      );
    checkInvalidScopeReference(arg, DEFINE_OPTIONS, setupBindings);
    s.moveNode(arg, scriptOffset, { offset: setupOffset });
    s.remove(setupOffset + node.start, setupOffset + arg.start);
    s.remove(setupOffset + arg.end, setupOffset + node.end);
    s.appendRight(scriptOffset, ");");
    normalScript.end();
  } else {
    s.removeNode(node, { offset: setupOffset });
  }
  return getTransformResult(s, id);
};
var checkDefaultExport = (stmts) => {
  const hasDefaultExport = stmts.some(
    (node) => node.type === "ExportDefaultDeclaration"
  );
  if (hasDefaultExport)
    throw new SyntaxError(
      `${DEFINE_OPTIONS} cannot be used with default export within <script>.`
    );
};
var getIdentifiers = (stmts) => {
  let ids = [];
  walkAST(
    {
      type: "Program",
      body: stmts,
      directives: [],
      sourceType: "module",
      sourceFile: ""
    },
    {
      enter(node) {
        if (node.type === "BlockStatement") {
          this.skip();
        }
      },
      leave(node) {
        if (node.type !== "Program")
          return;
        ids = Object.keys(this.scope);
      }
    }
  );
  return ids;
};

export {
  transform
};
