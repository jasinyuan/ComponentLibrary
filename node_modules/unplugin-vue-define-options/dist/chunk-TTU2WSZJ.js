"use strict";Object.defineProperty(exports, "__esModule", {value: true});


var _chunkEY2ZUJDYjs = require('./chunk-EY2ZUJDY.js');

// src/core/transform.ts







var _common = require('@vue-macros/common');
var _astwalkerscope = require('ast-walker-scope');
var transform = (code, id) => {
  if (!code.includes(_common.DEFINE_OPTIONS))
    return;
  const sfc = _common.parseSFC.call(void 0, code, id);
  if (!sfc.scriptSetup)
    return;
  const { script, scriptSetup, scriptCompiled } = sfc;
  const setupOffset = scriptSetup.loc.start.offset;
  const nodes = _chunkEY2ZUJDYjs.filterMacro.call(void 0, scriptCompiled.scriptSetupAst);
  if (nodes.length === 0) {
    return;
  } else if (nodes.length > 1)
    throw new SyntaxError(`duplicate ${_common.DEFINE_OPTIONS}() call`);
  if (script)
    checkDefaultExport(scriptCompiled.scriptAst);
  const setupBindings = scriptCompiled.scriptSetupAst ? getIdentifiers(scriptCompiled.scriptSetupAst) : [];
  const s = new (0, _common.MagicString)(code);
  const [node] = nodes;
  const [arg] = node.arguments;
  if (arg) {
    const normalScript = _common.addNormalScript.call(void 0, sfc, s);
    const scriptOffset = normalScript.start();
    s.appendLeft(
      scriptOffset,
      `
import { defineComponent as DO_defineComponent } from 'vue';
export default /*#__PURE__*/ DO_defineComponent(`
    );
    if (arg.type === "ObjectExpression" && _chunkEY2ZUJDYjs.hasPropsOrEmits.call(void 0, arg))
      throw new SyntaxError(
        `${_common.DEFINE_OPTIONS}() please use defineProps or defineEmits instead.`
      );
    _common.checkInvalidScopeReference.call(void 0, arg, _common.DEFINE_OPTIONS, setupBindings);
    s.moveNode(arg, scriptOffset, { offset: setupOffset });
    s.remove(setupOffset + node.start, setupOffset + arg.start);
    s.remove(setupOffset + arg.end, setupOffset + node.end);
    s.appendRight(scriptOffset, ");");
    normalScript.end();
  } else {
    s.removeNode(node, { offset: setupOffset });
  }
  return _common.getTransformResult.call(void 0, s, id);
};
var checkDefaultExport = (stmts) => {
  const hasDefaultExport = stmts.some(
    (node) => node.type === "ExportDefaultDeclaration"
  );
  if (hasDefaultExport)
    throw new SyntaxError(
      `${_common.DEFINE_OPTIONS} cannot be used with default export within <script>.`
    );
};
var getIdentifiers = (stmts) => {
  let ids = [];
  _astwalkerscope.walkAST.call(void 0, 
    {
      type: "Program",
      body: stmts,
      directives: [],
      sourceType: "module",
      sourceFile: ""
    },
    {
      enter(node) {
        if (node.type === "BlockStatement") {
          this.skip();
        }
      },
      leave(node) {
        if (node.type !== "Program")
          return;
        ids = Object.keys(this.scope);
      }
    }
  );
  return ids;
};



exports.transform = transform;
